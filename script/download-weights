import os
import sys
import torch
from diffusers import DiffusionPipeline, AutoencoderKL, UNet2DConditionModel
from diffusers.pipelines.stable_diffusion.safety_checker import (
    StableDiffusionSafetyChecker,
)

# append project directory to path so predict.py can be imported
sys.path.append('.')

from predict import MODEL_NAME, MODEL_CACHE

# Make cache folder
if not os.path.exists(MODEL_CACHE):
    os.makedirs(MODEL_CACHE)

# Download SDXL-VAE-FP16-Fix
better_vae = AutoencoderKL.from_pretrained(
    "madebyollin/sdxl-vae-fp16-fix",
    torch_dtype=torch.float16,
)

#LCM Unet
unet = UNet2DConditionModel.from_pretrained(
    "latent-consistency/lcm-sdxl", 
    torch_dtype=torch.float16,
    variant="fp16",
    cache_dir="unet-cache"
)

# RealvisXL-v2.0
stable_diffusion_pipe = DiffusionPipeline.from_pretrained(
    MODEL_NAME,
    vae=better_vae,
    unet=unet,
    torch_dtype=torch.float16,
    use_safetensors=True,
    cache_dir="model-cache"
)
stable_diffusion_pipe.save_pretrained(MODEL_CACHE, safe_serialization=True)


# safety checker
safety = StableDiffusionSafetyChecker.from_pretrained(
    "CompVis/stable-diffusion-safety-checker",
    torch_dtype=torch.float16,
)
safety.save_pretrained("./safety-cache")

pipe = TextToVideoSDPipeline.from_pretrained(
        "motexture/vseq2vseq",
        cache_dir="model-cache",
    )

